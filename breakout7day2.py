# -*- coding: utf-8 -*-
"""Breakout7Day2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/114nQU9zK6sJ-vzCbWsG_hDsnEhg5sXg5
"""

from google.colab import drive
drive.mount('/content/gdrive')

import os
os.environ['KAGGLE_CONFIG_DIR'] = "/content/gdrive/My Drive/kaggle"
# /content/gdrive/My Drive/Kaggle is the path where kaggle.json is present in the Google Drive

# Commented out IPython magic to ensure Python compatibility.
#changing the working directory
# %cd /content/gdrive/My Drive/kaggle
#Check the present working directory using pwd command

!kaggle datasets download -d ashpalsingh1525/mcdonaldsdataset

!unzip \*.zip  && rm *.zip

# Commented out IPython magic to ensure Python compatibility.
# Exploratory Data Analysis
# Import basic libraries
import numpy as np 
import pandas as pd 
# import visualization libraries
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline

# Commented out IPython magic to ensure Python compatibility.
# Set the Environment
# Ignore Warnings
import warnings
warnings.simplefilter(action='ignore', category=FutureWarning)

#Write out the versions of all packages to requirements.txt
!pip freeze >> requirements.txt

# Remove the restriction on Jupyter that limits the columns displayed (the ... in the middle)
pd.set_option('max_columns',None)
# Docs: https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.set_option.html#

# Pretty Display of variables.  for instance, you can call df.head() and df.tail() in the same cell and BOTH display w/o print
from IPython.core.interactiveshell import InteractiveShell
InteractiveShell.ast_node_interactivity = "all"

# List of ALL Magic Commands.  To run a magic command %var  --- i.e.:  %env
# %lsmagic
# %env  -- list environment variables
# %%time  -- gives you information about how long a cel took to run
# %%timeit -- runs a cell 100,000 times and then gives you the average time the cell will take to run (can be LONG)
# %pdb -- python debugger

# to display nice model diagram
from sklearn import set_config
set_config(display='diagram')

# Python ≥3.5 is required
import sys
assert sys.version_info >= (3, 5)

# Scikit-Learn ≥0.20 is required
import sklearn
assert sklearn.__version__ >= "0.20"

print("\n Numpy: " + np.__version__)
print("\n sklearn: " + sklearn.__version__)

df = pd.read_csv("mcd.csv")

df.head(5)

# Getting Meta Data Information about the dataset
df.info()

# Pull descriptive statistics from your overall dataset
df.describe().T

# Checking for Null Values 
df.isnull().sum()

# Preprocessing - go through all cat cols and validate against the data dictionary
print('serving_size' + str(sorted(df['serving_size'].unique())))

df['serving_size'].unique().size

# Preprocessing - go through all cat cols and validate against the data dictionary
print('name' + str(sorted(df['name'].unique())))

df['name'].unique().size

# Preprocessing - go through all cat cols and validate against the data dictionary
print('allergy' + str(sorted(df['allergy'].unique())))

df['allergy'].unique().size

# Univariate Analysis - Analyze 1 variable at a time
# This analysis is restricted to cat cols ... 
# Think about this... when you did a "describe" - you were analyzing the numeric cols... one at a time
sns.countplot(y="ingredients", data=df)

# Univariate Analysis - Analyze 1 variable at a time
# This analysis is restricted to cat cols ... 
# Think about this... when you did a "describe" - you were analyzing the numeric cols... one at a time
sns.countplot(y="name", data=df)

# Univariate Analysis - Analyze 1 variable at a time
# This analysis is restricted to cat cols ... 
# Think about this... when you did a "describe" - you were analyzing the numeric cols... one at a time
sns.countplot(y="allergy", data=df)

sns.countplot(y="tag", data=df)

sns.countplot(y="serving_size", data=df)

#Products with allergens
pd.crosstab(df.allergy,df.name,margins=True)

df['allergy'].value_counts(normalize=True)

# Bivariate Analysis
sns.set(rc={'figure.figsize':(12,8)})
edu = sns.countplot(x='name', hue='allergy', data=df)
#edu.set_xticklabels(['Male','Female'])
plt.show()

#Allergens and protein relatioship
pd.crosstab(df.allergy,df.protein,margins=True)

!pip install pandas-profiling==3.2.0
!pip install markupsafe==2.0.1
# https://pypi.org/project/pandas-profiling/3.1.0/#history

import pandas as pd
from pandas_profiling import ProfileReport

report = ProfileReport(df)
report

df['ingredient_count'] = df['ingredients'].apply(lambda x: 0 if x is null else df.string_column.str.count(',')+1 )